package wordclass;
import java.util.ArrayList;
import java.util.Random;
public class WordClass {
    WordClass()
    {
        dictionary=new ArrayList();
    }
    WordClass(String dictFile)
    {
        dictionary=new ArrayList();
    }
    private ArrayList dictionary;
    private String word;
    private Random random=new Random();
//    String[] alphaSort()
//    {
//        
//    }
//    String[] alphaSort(String str)
//    {
//        
//    }
    String charToString(char ch)
    {
        String aa=""+ch;
        return aa;
    }
    boolean contains(char p, String whole)
    {
        return whole.contains(""+p);
    }
    boolean contains(String part)
    {
        return word.contains(part);
    }
    boolean contains(String part, String whole)
    {
        return whole.contains(part);
    }
//    String differBy(Sting word, int quan)
//    {
//        
//    }
    String getWordRandom()
    {
        return (String)dictionary.get(random.nextInt(dictionary.size()));
    }
    int howManyOf(char ch, String whole)
    {
        int counter=0;
        for(int c=0; c<whole.length(); c++)
            if(whole.charAt(c)==ch)
                counter++;
        return counter;
    }
    int howManyOf(String part, String whole)
    {
        whole=whole.replaceAll("~", "");
        if(whole.contains(part))
        {
            whole=whole.replaceAll(part, "~");
            return howManyOf('*', whole);
        }
        return 0;
    }
//    int indexAt(char ch)
//    {
//        
//    }
//    int indexAt(char ch, int place)
//    {
//        
//    }
//    int indexAt(int num, char ch, String str)
//    {
//        
//    }
//    int indexAt(int num, String part, String whole)
//    {
//        
//    }
//    int indexAt(String part, String whole)
//    {
//        
//    }
//    int indexOfWord(String part)
//    {
//        
//    }
//    int indexOfWord(String part)
//    {
//        
//    }
//    int indexOfWord(String part, int place)
//    {
//        
//    }
//    int indexOfWordInLibrary(String target)
//    {
//        
//    }
    boolean isAlpha(char ch)
    {
        return (65<=ch&&ch<=90)||(97<=ch&&ch<=122);
    }
    boolean isAlpha(String str)
    {
        for(int c=0; c<str.length(); c++)
            if(!isAlpha(str.charAt(c)))
                return false;
        return true;
    }
//    boolean isSubset(String str)
//    {
//        
//    }
//    boolean isSubset(String part, String whole)
//    {
//        
//    }
//    String[] lengthLimit(int size)
//    {
//        
//    }
    String lower()
    {
        return word=word.toLowerCase();
    }
    String lower(char ch)
    {
        return (""+ch).toLowerCase();
    }
    String lower(String str)
    {
        return str.toLowerCase();
    }
    String[] parseSentence(String str)
    {
        str=str.trim();
        for(int c=0; c<str.length(); c++)
            if(!isAlpha(str.charAt(c)))
                    str=str.replace(charToString(str.charAt(c)), "");
        return str.split(" ");
    }
//    String[] returnAlphaFile(String fileName)
//    {
//        
//    }
//    String[] returnCurrentLibrary()
//    {
//    
//    }
    String reverse(String str)
    {
        String rts="";
        for(int counter=str.length()-1; counter>-1; counter--)
        {
            rts+=str.charAt(counter);
        }
        return rts;
    }
    void setCurrentWord(String passed)
    {
        word=passed;
    }
//    void setLibraryValue(String[] listName)
//    {
//        
//    }
//    void setLibraryValue(String filename)
//    {
//        
//    }
    void setRandomWord()
    {
        word = (String)dictionary.get(random.nextInt(dictionary.size()));
    }
    String showCurrentWord()
    {
        return word;
    }
    String showWordAt(int pos)
    {
        return (String)dictionary.get(pos);
    }
    String upper()
    {
        return(word=word.toUpperCase());   
    }
    char upper(char ch)
    {
        return Character.toUpperCase(ch);
    }
    String upper(String str)
    {
        return(str.toUpperCase());
    }
    String wordAt(int place)
    {
        return (String)dictionary.get(place);
    }
    int wordCount()
    {
        return dictionary.size();
    }
    void writeLibrary(String fileName)
    {
        //TODO: Finish this
    }
}
