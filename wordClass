import java.util.ArrayList;
import java.util.Random;
public class WordClass {
    WordClass()
    {
        dictionary=new ArrayList();
    }
    WordClass(String dictFile)
    {
        dictionary=new ArrayList();
    }
    private ArrayList dictionary;
    private String word;
    private Random random=new Random();
    String alphaSort()
    {
        String retrn="";
        retrn=retrn.toLowerCase();
        int alphabet[][]= new int[2][26];
        for(int c:alphabet[0])
        {
            alphabet[0][c]=c+97;
            alphabet[1][c]=0;
        }
        for(int c=0; c<word.length(); c++)
        {
            for(int d:alphabet[0])
                if(alphabet[0][d]==word.charAt(c))
                    alphabet[0][d]++;
        }
        for(int c=0; c<word.length(); c++)
        {
            for(int d=0; d<alphabet[1][c]; d++)
            {
                retrn+=alphabet[0][d];
            }
        }
        return retrn;
    }
    String alphaSort(String str)
    {
        String retrn="";
        retrn=retrn.toLowerCase();
        int alphabet[][]= new int[2][26];
        for(int c:alphabet[0])
        {
            alphabet[0][c]=c+97;
            alphabet[1][c]=0;
        }
        for(int c=0; c<str.length(); c++)
        {
            for(int d:alphabet[0])
                if(alphabet[0][d]==str.charAt(c))
                    alphabet[0][d]++;
        }
        for(int c=0; c<str.length(); c++)
        {
            for(int d=0; d<alphabet[1][c]; d++)
            {
                retrn+=alphabet[0][d];
            }
        }
        return retrn;
    }
    String charToString(char ch)
    {
        String aa=""+ch;
        return aa;
    }
    boolean contains(char p, String whole)
    {
        return whole.contains(""+p);
    }
    boolean contains(String part)
    {
        return word.contains(part);
    }
    boolean contains(String part, String whole)
    {
        return whole.contains(part);
    }
    ArrayList differBy(String word, int quan)
    {
        ArrayList possible=new ArrayList();
        ArrayList successes=new ArrayList();
        String alphaword=alphaSort(word);
        String tempsto;
        for(Object c:dictionary)
            if(((String)c).length()==word.length())
                possible.add(c);
        for(Object c:possible)
            do a thing;
            //TODO: finish
        return successes;
    }
    String getWordRandom()
    {
        return (String)dictionary.get(random.nextInt(dictionary.size()));
    }
    int howManyOf(char ch, String whole)
    {
        int counter=0;
        for(int c=0; c<whole.length(); c++)
            if(whole.charAt(c)==ch)
                counter++;
        return counter;
    }
    int howManyOf(String part, String whole)
    {
        whole=whole.replaceAll("~", "");
        if(whole.contains(part))
        {
            whole=whole.replaceAll(part, "~");
            return howManyOf('*', whole);
        }
        return 0;
    }
    int indexAt(char ch)
    {
        return word.indexOf((int)ch);
    }
    int indexAt(char ch, int place)
    {
        return word.indexOf((int)ch, place);
    }
    int indexAt(int num, char ch, String str)
    {
        return str.indexOf((int)ch, num);
    }
    int indexAt(int num, String part, String whole)
    {
        return whole.indexOf(part, num);
    }
    int indexAt(String part, String whole)
    {
        return whole.indexOf(part);
    }
    int indexOfWordInLibrary(String target)
    {
        int counter=0;
        for(Object c:dictionary)
        {
            if(((String)c).equals(target))
                return counter;
            else
                counter++;
        }
        return -1;
    }
    boolean isAlpha(char ch)
    {
        return (65<=ch&&ch<=90)||(97<=ch&&ch<=122);
    }
    boolean isAlpha(String str)
    {
        for(int c=0; c<str.length(); c++)
            if(!isAlpha(str.charAt(c)))
                return false;
        return true;
    }
    boolean isSubset(String part, String whole)
    {
        return(whole.contains(part));
    }
    ArrayList lengthLimit(int size)
    {
        ArrayList rtrn=new ArrayList();
        for(Object c:dictionary)
            if(((String)c).length()==size)
                rtrn.add(c);
        return rtrn;
    }
    String lower()
    {
        return word=word.toLowerCase();
    }
    String lower(char ch)
    {
        return (""+ch).toLowerCase();
    }
    String lower(String str)
    {
        return str.toLowerCase();
    }
    String[] parseSentence(String str)
    {
        str=str.trim();
        for(int c=0; c<str.length(); c++)
            if(!isAlpha(str.charAt(c)))
                    str=str.replace(charToString(str.charAt(c)), "");
        return str.split(" ");
    }
    ArrayList returnAlphaFile(String fileName)
    {
        dictionary.clear();
        EasyReader in=new EasyReader(fileName);
        String tempsto=in.readWord(), adder;
        ArrayList arr=new ArrayList();
        while(!in.eof())
        {
            adder="";
            lower(tempsto);
            for(int c=0; c<tempsto.length(); c++)
                if(isAlpha(tempsto.charAt(c)))
                    adder+=tempsto.charAt(c);
            arr.add(adder);
            tempsto=in.readWord();
        }
        return arr;
    }
    ArrayList returnCurrentLibrary()
    {
        return dictionary;
    }
    String reverse(String str)
    {
        String rts="";
        for(int counter=str.length()-1; counter>-1; counter--)
        {
            rts+=str.charAt(counter);
        }
        return rts;
    }
    void setCurrentWord(String passed)
    {
        word=passed;
    }
    void setLibraryValue(String[] listName)
    {
        dictionary.clear();
        for(String c:listName)
            dictionary.add(c);
    }
    void setLibraryValue(String filename)
    {
        dictionary.clear();
        EasyReader in=new EasyReader(filename);
        dictionary.add(in.readLine());
        while(!in.eof())
        {
            dictionary.add(in.readLine());
        }
    }
    void setRandomWord()
    {
        word = (String)dictionary.get(random.nextInt(dictionary.size()));
    }
    String showCurrentWord()
    {
        return word;
    }
    String showWordAt(int pos)
    {
        return (String)dictionary.get(pos);
    }
    String upper()
    {
        return(word=word.toUpperCase());   
    }
    char upper(char ch)
    {
        return Character.toUpperCase(ch);
    }
    String upper(String str)
    {
        return(str.toUpperCase());
    }
    String wordAt(int place)
    {
        return (String)dictionary.get(place);
    }
    int wordCount()
    {
        return dictionary.size();
    }
    void writeLibrary(String fileName)
    {
        EasyWriter out=new EasyWriter(fileName);
        for(Object c:dictionary)
        {
            out.println(c);
        }
    }
}
