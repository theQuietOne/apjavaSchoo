//class
package fractionclass;
public class Fraction{
    private int fractNum, fractDenom;
    Fraction()
    {
        fractNum=0;
        fractDenom=1;
    }
    Fraction(int num, int denum)
    {
	fractNum = num;
	fractDenom = denum;
    }
    Fraction(String frati)				//constructs class with predetermined value; format is below
    {
	//format is <mixed&>num/denom
       char[] frat=frati.toCharArray();
       String sto="";
       int intsto=0;
       for(char c:frat)
       {
           if(c=='&')
           {
               intsto=Integer.parseInt(sto);
               sto="";
           }
           else if(c=='/')
           {
                fractNum=Integer.parseInt(sto);
                sto="";
           }
           else
               sto+=c;
       }
       fractDenom=Integer.parseInt(sto);
       fractNum+=intsto*fractDenom;
       int useless=fractNum/fractDenom;
    }
    Fraction reduce()
    {
        Fraction frac=new Fraction();
	int biggest;
	if (fractNum < fractDenom)
            biggest = fractDenom;
	else
            biggest = fractNum;
	boolean flag = true;
	while (flag)
	{
		flag = false;
		for (int reduce = 2; reduce <= biggest; reduce++)
		{
			if (fractNum%reduce == 0 && fractDenom%reduce == 0)
			{
				fractNum /= reduce;
				fractDenom /= reduce;
				flag = true;
			}
		}
        }
        frac.fractNum=fractNum;
        frac.fractDenom=fractDenom;
        return frac;
    }
    Fraction multFrac(Fraction multdo)	//multiplies two fractions together
    {
	Fraction multing=new Fraction();
	multing.fractNum = fractNum * multdo.fractNum;
	multing.fractDenom = fractDenom * multdo.fractDenom;
	return multing;
    }
    Fraction divideFrac(Fraction divdo)//divides one fraction by another
    {
	Fraction diving=new Fraction();
	diving.fractNum = fractNum * divdo.fractDenom;
	diving.fractDenom = fractDenom * divdo.fractNum;
        int useless=diving.fractNum/diving.fractDenom;
	return diving;
    }
    int wholeFind(Fraction mixmake)			//returns whole number which would be associated with fraction value (IE 2 for 7/3)
    {
	return mixmake.fractNum / mixmake.fractDenom;
    }
    Fraction addFrac(Fraction adddo)	//adds two fractions together
    {
	Fraction added=new Fraction();
	int num = fractDenom;
	fractNum *= adddo.fractDenom;
	fractDenom *= adddo.fractDenom;
	adddo.fractNum *= num;
	adddo.fractDenom *= num;
	added.fractNum = fractNum + adddo.fractNum;
	added.fractDenom = fractDenom;
	return added;
    }
    Fraction subtractFrac(Fraction subdo)//subtracts one fraction from another
    {
	Fraction subded=new Fraction();
	int num = fractDenom;
	fractNum *= subdo.fractDenom;
	fractDenom *= subdo.fractDenom;
	subdo.fractNum *= num;
	subdo.fractDenom *= num;
	subded.fractNum = fractNum-subdo.fractNum;
	subded.fractDenom = fractDenom;
	return subded;
    }
    boolean equalFrac(Fraction comparedo)		//determines if two fractions are equal
    {
	float num1=fractNum, num2=comparedo.fractNum, denom1=fractDenom, denom2=comparedo.fractDenom;
	return (num1 / denom1 == num2 / denom2);
    }
    boolean isLessThanFrac(Fraction comparedo)	//determines if a fraction is less than another
    {
	float num1 = fractNum, num2 = comparedo.fractNum, denom1 = fractDenom, denom2 = comparedo.fractDenom;
	return (num1 / denom1 < num2 / denom2);
    }
    boolean isGreaterThanFrac(Fraction comparedo)//determines if a fraction is greater than another
    {
	float num1 = fractNum, num2 = comparedo.fractNum, denom1 = fractDenom, denom2 = comparedo.fractDenom;
	return (num1 / denom1 > num2 / denom2);
    }
    String showFrac()						//returns the current content of the object
    {
	return ((fractNum) + "/" + (fractDenom));
    }
    void setFrac(String frati)						//changes values of numerator and denominator simultaniously
    {
        char[] frat=frati.toCharArray();
       String sto="";
       int intsto=0;
       for(char c:frat)
       {
           if(c=='&')
           {
               intsto=Integer.parseInt(sto);
               sto="";
           }
           else if(c=='/')
           {
                fractNum=Integer.parseInt(sto);
                sto="";
           }
           else
               sto+=c;
       }
       fractDenom=Integer.parseInt(sto);
       fractNum+=intsto*fractDenom;
       int useless=fractNum/fractDenom;
    }
    void setNum(int num)							//sets numerator to a value
    {
	fractNum = num;
    }
    void setDenom(int den)						//sets denominator to a value
    {
        int useless=1/den;
        fractDenom = den;
    }
    int showDenom()							//returns current value of denominator
    {
	return fractDenom;
    }
    int showNum()							//returns current value of numerator
    {
	return fractNum;
    }
    void copyFrac(Fraction setdo)			//sets fraction's value to passed fraction
    {
	fractNum = setdo.fractNum;
	fractDenom = setdo.fractDenom;
    }
    void clearFrac()							//sets fraction to 0/1
    {
        fractNum = 0;
        fractDenom = 1;
    }
}
//main
package fractionclass;
public class runFrac {
    public static void main(String[]args)
    {
        int num, stoint;
        Fraction A=new Fraction();
        Fraction B=new Fraction(2,3);
        Fraction C=new Fraction("1&3/7");
        String storage="";
        Scanner in=new Scanner(System.in);
        System.out.println("Enter the number which corresponds to your test");
        num=in.nextInt();
        in.nextLine();
        while(num!=0)
        {
            switch(num)
            {
                case 1:
			A=A.reduce();
			break;
		case 2:
			B=B.reduce();
			break;
		case 3:
			C=C.reduce();
			break;
		case 4:
			C = A.multFrac(B);
			break;
		case 5:
			C = A.divideFrac(B);
			break;
		case 6:
			A.wholeFind(A);
			break;
		case 7:
			B.wholeFind(B);
			break;
		case 8:
			C.wholeFind(C);
			break;
		case 9:
			C = A.addFrac(B);
			break;
		case 10:
			C = A.subtractFrac(B);
			break;
                case 11:
                    System.out.println(A.equalFrac(B));
                    break;
                case 12:
                    System.out.println(A.isLessThanFrac(B));
                    break;
                case 13:
                    System.out.println(A.isGreaterThanFrac(B));
                    break;
                case 14:
                    System.out.println(A.showFrac());
                    break;
                case 15:
                    System.out.println(B.showFrac());
                    break;
                case 16:
                    System.out.println(C.showFrac());
                    break;
                case 17:
                    storage=in.nextLine();
                    A.setFrac(storage);
                    break;
                case 18:
                    storage=in.nextLine();
                    B.setFrac(storage);
                    break;
                case 19:
                    storage=in.nextLine();
                    C.setFrac(storage);
                    break;
                case 20:
                    stoint=in.nextInt();
                    A.setNum(stoint);
                    break;
                case 21:
                    stoint=in.nextInt();
                    B.setNum(stoint);
                    break;
                case 22:
                    stoint=in.nextInt();
                    C.setNum(stoint);
                    break;
                case 23:
                    stoint=in.nextInt();
                    A.setDenom(stoint);
                    break;
                case 24:
                    stoint=in.nextInt();
                    B.setDenom(stoint);
                    break;
                case 25:
                    stoint=in.nextInt();
                    C.setDenom(stoint);
                    break;
                case 26:
			A.showNum();
			break;
		case 27:
			B.showNum();
			break;
		case 28:
			C.showNum();
			break;
		case 29:
			A.showDenom();
			break;
		case 30:
			B.showDenom();
			break;
		case 31:
			C.showDenom();
			break;
		case 32:
			A.copyFrac(B);
			break;
		case 33:
			B.copyFrac(A);
			break;
		case 34:
			A.copyFrac(C);
			break;
		case 35:
			C.copyFrac(A);
			break;
		case 36:
			B.copyFrac(C);
			break;
		case 37:
			C.copyFrac(B);
			break;
		case 38:
			A.clearFrac();
			break;
		case 39:
			B.clearFrac();
			break;
		case 40:
			C.clearFrac();
			break;
                default:
                    System.out.print("Looks like that doesn't exist.  ");
            }
            System.out.println("Enter the number which corresponds to your test");
            num=in.nextInt();
            in.nextLine();
        }
    }
}
